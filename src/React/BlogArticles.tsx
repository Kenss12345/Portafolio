import { useState } from "react";

interface Article {
  id: number;
  title: string;
  excerpt: string;
  content: string;
  date: string;
  readTime: number;
  tags: string[];
  image: string;
}

const BlogArticles = () => {
  const [selectedArticle, setSelectedArticle] = useState<Article | null>(null);
  const [readProgress, setReadProgress] = useState(0);

  const articles: Article[] = [
    {
      id: 1,
      title: "Construyendo Apps M√≥viles y Web con Flutter",
      excerpt: "Mi experiencia desarrollando aplicaciones multiplataforma con Flutter y Firebase.",
      content: `En este art√≠culo compartir√© mi experiencia desarrollando aplicaciones m√≥viles con Flutter, un framework que ha revolucionado completamente la forma en que creo aplicaciones multiplataforma.

üöÄ ¬øPor qu√© Flutter?

Flutter es un framework incre√≠ble desarrollado por Google que me ha permitido crear aplicaciones para iOS, Android y Web con una sola base de c√≥digo. Durante el desarrollo de AppComu, descubr√≠ el verdadero potencial de esta tecnolog√≠a.

La principal ventaja es la productividad: escribes el c√≥digo una vez y funciona en m√∫ltiples plataformas sin necesidad de mantener bases de c√≥digo separadas. Esto no solo ahorra tiempo, sino que tambi√©n reduce significativamente los errores y facilita el mantenimiento.

üìö Conceptos Clave que Dominas

Durante mi aprendizaje y desarrollo con Flutter, profundic√© en varios conceptos fundamentales:

‚Ä¢ Gesti√≥n de estado con Provider y Riverpod: Aprend√≠ a manejar el estado de la aplicaci√≥n de manera eficiente, evitando re-renders innecesarios y manteniendo el c√≥digo limpio y organizado.

‚Ä¢ Integraci√≥n con Firebase: Implement√© autenticaci√≥n completa (email/password, Google Sign-In), base de datos en tiempo real con Firestore, y almacenamiento de archivos con Firebase Storage.

‚Ä¢ Optimizaci√≥n de rendimiento: Utilic√© ListView.builder para listas largas, implement√© lazy loading de im√°genes, y optimic√© las consultas a la base de datos.

‚Ä¢ Dise√±o responsive y adaptativo: Cre√© interfaces que se adaptan perfectamente a diferentes tama√±os de pantalla, desde smartphones hasta tablets.

‚ö° El Poder del Hot Reload

Una de las caracter√≠sticas m√°s poderosas es el hot reload. Esta funcionalidad te permite ver los cambios en tiempo real sin perder el estado de la aplicaci√≥n. Es como magia: modificas el c√≥digo, guardas, y en menos de un segundo ves el resultado en tu dispositivo o emulador.

Esto acelera significativamente el desarrollo y hace que la experiencia de programar sea mucho m√°s fluida y agradable. Ya no necesitas recompilar toda la aplicaci√≥n cada vez que haces un peque√±o cambio.

üé® Widgets: Los Bloques de Construcci√≥n

Flutter destaca por su amplia biblioteca de widgets predise√±ados. Desde botones b√°sicos hasta componentes complejos como listas infinitas o animaciones elaboradas, Flutter tiene un widget para casi todo.

Los widgets en Flutter son componentes reutilizables que puedes combinar para crear interfaces complejas. Adem√°s, la personalizaci√≥n es muy sencilla: puedes modificar colores, tama√±os, formas y comportamientos con solo unas pocas l√≠neas de c√≥digo.

üîß Desaf√≠os Superados

Como en todo proyecto, enfrent√© varios desaf√≠os:

1. Integraci√≥n con APIs nativas: Algunos servicios requieren c√≥digo nativo espec√≠fico para cada plataforma. Aprend√≠ a usar platform channels para comunicar Flutter con c√≥digo Kotlin/Swift.

2. Gesti√≥n de permisos: Cada plataforma (iOS y Android) maneja los permisos de manera diferente. Implement√© soluciones robustas usando el paquete permission_handler.

3. Optimizaci√≥n de tama√±o de la app: Las aplicaciones Flutter pueden ser pesadas. Aprend√≠ t√©cnicas como tree shaking, compilaci√≥n en modo release, y divisi√≥n de c√≥digo para reducir el tama√±o final.

4. Testing: Implement√© pruebas unitarias, de widgets y de integraci√≥n para garantizar la calidad del c√≥digo.

üí° Lecciones Aprendidas

Despu√©s de desarrollar AppComu con Flutter, puedo decir que:

‚Ä¢ La curva de aprendizaje inicial vale completamente la pena
‚Ä¢ La documentaci√≥n oficial es excelente y muy completa
‚Ä¢ La comunidad es activa y siempre est√° dispuesta a ayudar
‚Ä¢ Es ideal para startups y proyectos que necesitan lanzarse r√°pido
‚Ä¢ El rendimiento es casi nativo en la mayor√≠a de los casos

üéØ Conclusi√≥n

Flutter no es solo un framework m√°s, es una herramienta que realmente cambia la forma en que desarrollas aplicaciones m√≥viles. Si est√°s considerando aprender desarrollo m√≥vil o buscas una alternativa a desarrollo nativo, Flutter es una excelente opci√≥n.

La combinaci√≥n de Flutter con Firebase crea un ecosistema completo y poderoso para desarrollar aplicaciones modernas. Desde la autenticaci√≥n hasta el almacenamiento y las notificaciones push, todo est√° perfectamente integrado.

¬øMi recomendaci√≥n? Si tienes conocimientos de programaci√≥n orientada a objetos y quieres entrar al mundo del desarrollo m√≥vil, Flutter es tu mejor opci√≥n para 2025.`,
      date: "2025-01-15",
      readTime: 8,
      tags: ["Flutter", "Mobile", "Firebase"],
      image: "/BlogArticles/FlutterFirebase.png"
    },
    {
      id: 2,
      title: "Optimizaci√≥n de Algoritmos en C++",
      excerpt: "T√©cnicas avanzadas de optimizaci√≥n y estructuras de datos para mejorar el rendimiento.",
      content: `La optimizaci√≥n de c√≥digo es crucial para aplicaciones de alto rendimiento, y en este art√≠culo compartir√© mi experiencia optimizando algoritmos complejos durante el desarrollo de TravelEase, una aplicaci√≥n de rutas inteligentes.

üéØ El Reto: B√∫squeda de Rutas en Tiempo Real

TravelEase necesitaba encontrar rutas √≥ptimas entre dos puntos en la ciudad de Huancayo en tiempo real. Con cientos de intersecciones, calles y posibles rutas, la eficiencia era cr√≠tica. Un algoritmo lento significar√≠a usuarios frustrados esperando respuestas.

El desaf√≠o era doble: encontrar no solo la ruta m√°s corta, sino tambi√©n considerar el tr√°fico en tiempo real, el tipo de transporte disponible, y las preferencias del usuario.

üß† Algoritmos de Grafos: El Coraz√≥n del Sistema

Implement√© dos algoritmos principales:

1. Dijkstra: Para encontrar la ruta m√°s corta desde un punto origen a todos los dem√°s puntos del grafo. Es el algoritmo cl√°sico, confiable y eficiente cuando no tenemos informaci√≥n sobre la ubicaci√≥n del destino.

2. A* (A-Star): Una versi√≥n mejorada de Dijkstra que usa heur√≠sticas para dirigir la b√∫squeda hacia el objetivo. En la pr√°ctica, A* es significativamente m√°s r√°pido porque "sabe" en qu√© direcci√≥n buscar.

La diferencia de rendimiento fue sorprendente: mientras Dijkstra exploraba en promedio 500 nodos para encontrar una ruta, A* solo necesitaba explorar 150-200 nodos gracias a su funci√≥n heur√≠stica bien dise√±ada.

üìä Estructuras de Datos: La Clave del Rendimiento

La elecci√≥n de estructuras de datos adecuadas marc√≥ una diferencia dram√°tica en el rendimiento:

‚Ä¢ Priority Queue (Heap): Fundamental para los algoritmos de b√∫squeda. Me permiti√≥ extraer el nodo con menor costo en O(log n) en lugar de O(n) con una lista simple. Esto redujo el tiempo de ejecuci√≥n en un 40%.

‚Ä¢ Unordered Map (Hash Map): Para acceso r√°pido a los nodos del grafo en O(1) promedio. Cada nodo representa una intersecci√≥n y necesitaba acceso constante a su informaci√≥n.

‚Ä¢ Vector con reserva de memoria: En lugar de usar push_back sin reserva, prealoqu√© memoria para evitar reasignaciones constantes. Esto mejor√≥ el rendimiento en un 15% adicional.

‚Ä¢ Sets ordenados: Para mantener los nodos visitados y evitar ciclos infinitos en el grafo.

üîç T√©cnicas de Optimizaci√≥n Aplicadas

1. Punteros Inteligentes (Smart Pointers)
En lugar de manejar memoria manualmente con new/delete, utilic√©:
‚Ä¢ std::unique_ptr para ownership exclusivo
‚Ä¢ std::shared_ptr cuando varios componentes necesitaban acceder al mismo nodo
‚Ä¢ std::weak_ptr para evitar ciclos de referencias

Esto elimin√≥ completamente los memory leaks y simplific√≥ el c√≥digo.

2. Templates para Genericidad
Implement√© templates para que los algoritmos funcionaran con diferentes tipos de grafos y pesos (distancia, tiempo, costo). Esto permiti√≥ reutilizar el mismo c√≥digo para diferentes escenarios.

3. Move Semantics
Aprovech√© std::move para transferir recursos pesados en lugar de copiarlos. Esto fue especialmente √∫til al manejar grafos grandes.

4. Inline Functions
Marqu√© funciones peque√±as y frecuentes como inline para eliminar el overhead de llamadas a funci√≥n.

‚ö° Profiling: Midiendo el Rendimiento Real

Us√© herramientas de profiling como:

‚Ä¢ Valgrind: Para detectar memory leaks y analizar el uso de memoria
‚Ä¢ gprof: Para identificar qu√© funciones consum√≠an m√°s tiempo
‚Ä¢ Perf: Para an√°lisis detallado a nivel de CPU

El profiling revel√≥ sorpresas: funciones que pensaba eran r√°pidas resultaron ser cuellos de botella, y optimizaciones que cre√≠a importantes apenas afectaban el rendimiento.

üìà An√°lisis de Complejidad Temporal

Entender la complejidad es fundamental:

‚Ä¢ Dijkstra sin optimizaci√≥n: O(V¬≤) donde V es el n√∫mero de v√©rtices
‚Ä¢ Dijkstra con priority queue: O((V + E) log V) donde E son las aristas
‚Ä¢ A* optimizado: O(E log V) en el caso promedio

Para un grafo de 500 intersecciones y 1500 calles:
‚Ä¢ Versi√≥n sin optimizar: ~250,000 operaciones
‚Ä¢ Versi√≥n optimizada: ~11,000 operaciones
‚Ä¢ ¬°Una mejora de m√°s del 95%!

üõ†Ô∏è Optimizaciones Espec√≠ficas del Dominio

1. Cach√© de Rutas Frecuentes
Implement√© un sistema de cach√© LRU para almacenar las 100 rutas m√°s consultadas. Si un usuario pide la ruta del punto A al B y ya la calculamos recientemente, la servimos del cach√©.

2. Prec√°lculo de Distancias
Para ubicaciones populares (universidades, centros comerciales), precalcul√© las distancias en horarios de baja carga del servidor.

3. √çndices Espaciales
Us√© un quadtree para b√∫squedas espaciales r√°pidas. Cuando un usuario busca transporte cerca de su ubicaci√≥n, el quadtree encuentra las opciones cercanas en O(log n) en lugar de revisar todas.

üí° Lecciones Aprendidas

1. "Primero hazlo funcionar, luego hazlo r√°pido": No optimices prematuramente. Primero implementa correctamente el algoritmo.

2. Mide antes de optimizar: Lo que crees que es lento puede no serlo. Usa profilers.

3. La estructura de datos correcta puede ser m√°s importante que el algoritmo: Un algoritmo O(n log n) con una estructura de datos eficiente puede superar a un algoritmo O(n) con estructuras ineficientes.

4. La memoria importa: Un algoritmo r√°pido pero que consume mucha memoria puede ser peor que uno m√°s lento pero eficiente en memoria, especialmente en dispositivos m√≥viles.

üéØ Resultados Finales

Las optimizaciones llevaron a:
‚Ä¢ Tiempo de respuesta: De 2-3 segundos a menos de 200ms
‚Ä¢ Uso de memoria: Reducci√≥n del 60%
‚Ä¢ Capacidad: El servidor puede manejar 10x m√°s usuarios simult√°neos
‚Ä¢ Bater√≠a: Menor consumo en dispositivos m√≥viles

La combinaci√≥n de algoritmos inteligentes, estructuras de datos eficientes, y t√©cnicas modernas de C++ result√≥ en una aplicaci√≥n r√°pida, eficiente y escalable que puede crecer con las necesidades del proyecto.`,
      date: "2024-12-20",
      readTime: 9,
      tags: ["C++", "Algorithms", "Performance"],
      image: "/BlogArticles/Djistra.png"
    },
    {
      id: 3,
      title: "IA y Reconocimiento de Movimientos",
      excerpt: "Implementando visi√≥n por computadora con Python para detectar ejercicios f√≠sicos.",
      content: `El proyecto EvoFit me permiti√≥ explorar el fascinante mundo de la inteligencia artificial aplicada al fitness, creando un sistema que act√∫a como entrenador personal virtual usando visi√≥n por computadora.

üéØ La Visi√≥n: Tu Entrenador Personal con IA

La idea surgi√≥ de una necesidad real: muchas personas quieren hacer ejercicio en casa pero no tienen acceso a un entrenador que les corrija la t√©cnica. Una mala ejecuci√≥n no solo reduce la efectividad del ejercicio, sino que puede causar lesiones.

EvoFit usa la c√°mara de tu dispositivo para analizar tus movimientos en tiempo real, validar si est√°s haciendo el ejercicio correctamente, contar repeticiones autom√°ticamente, y darte feedback inmediato para mejorar tu t√©cnica.

üß† Tecnolog√≠as y Librer√≠as Utilizadas

Para este proyecto, eleg√≠ un stack tecnol√≥gico potente y bien establecido:

1. MediaPipe de Google: Una librer√≠a incre√≠ble para detecci√≥n de poses que incluye modelos pre-entrenados altamente precisos. MediaPipe puede detectar 33 puntos clave del cuerpo humano (landmarks) en tiempo real.

2. TensorFlow y Keras: Para construir modelos personalizados que clasifican si un ejercicio se est√° realizando correctamente o no.

3. OpenCV: Para procesamiento de video, captura de frames, y visualizaci√≥n de los puntos detectados.

4. NumPy y Pandas: Para manipulaci√≥n eficiente de datos y c√°lculos matem√°ticos.

üé® Caracter√≠sticas Principales del Sistema

El sistema que desarroll√© incluye varias capacidades sofisticadas:

‚Ä¢ Detecci√≥n de Poses en Tiempo Real: El modelo de MediaPipe procesa cada frame del video y detecta la posici√≥n exacta de 33 puntos del cuerpo (hombros, codos, mu√±ecas, caderas, rodillas, tobillos, etc.) en menos de 50ms.

‚Ä¢ Validaci√≥n de T√©cnica: Analiza los √°ngulos entre articulaciones y la posici√≥n relativa de los puntos clave para determinar si est√°s haciendo el ejercicio correctamente. Por ejemplo, en una sentadilla, valida que tus rodillas no pasen los dedos de los pies y que tu espalda est√© recta.

‚Ä¢ Contador Autom√°tico de Repeticiones: Usa m√°quinas de estado para detectar el ciclo completo de un ejercicio (posici√≥n inicial ‚Üí ejecuci√≥n ‚Üí vuelta a posici√≥n inicial). Solo cuenta repeticiones correctamente ejecutadas.

‚Ä¢ Feedback en Tiempo Real: Muestra indicadores visuales en pantalla cuando detecta errores comunes: "Espalda m√°s recta", "Baja m√°s las caderas", "Extiende completamente los brazos", etc.

‚Ä¢ Tracking de Progreso: Guarda tu historial de entrenamientos, n√∫mero de repeticiones, tiempo de ejercicio, y calor√≠as quemadas estimadas.

‚ö° Desaf√≠os T√©cnicos y Soluciones

El desarrollo no fue sencillo. Enfrent√© varios desaf√≠os significativos:

1. Diferentes Condiciones de Iluminaci√≥n
Problema: MediaPipe funciona perfectamente en condiciones ideales, pero en ambientes con poca luz o luz irregular, la detecci√≥n fallaba.

Soluci√≥n: Implement√© un preprocesamiento de imagen que ajusta autom√°ticamente el brillo y contraste usando t√©cnicas de ecualizaci√≥n de histograma. Tambi√©n agregu√© filtros de suavizado para reducir el ruido.

2. Variabilidad de √Ångulos de C√°mara
Problema: La detecci√≥n de poses es muy sensible al √°ngulo de la c√°mara. Una c√°mara muy alta o muy baja puede dificultar la detecci√≥n de ciertos puntos.

Soluci√≥n: Entren√© al sistema para que funcione desde m√∫ltiples √°ngulos. Tambi√©n agregu√© una gu√≠a inicial que ayuda al usuario a posicionar correctamente la c√°mara usando una silueta de referencia.

3. Normalizaci√≥n de Datos
Problema: Las coordenadas de los landmarks var√≠an seg√∫n la distancia del usuario a la c√°mara y el tama√±o del frame.

Soluci√≥n: Normalic√© todos los puntos usando la distancia entre hombros como referencia. Esto hace que el sistema sea invariante al tama√±o y posici√≥n del usuario en el frame.

4. Modelos Pre-entrenados vs Personalizados
Problema: Los modelos pre-entrenados de MediaPipe son excelentes para detecci√≥n de poses generales, pero no est√°n optimizados para ejercicios espec√≠ficos.

Soluci√≥n: Utilic√© transfer learning. Tom√© el modelo base de MediaPipe y le agregu√© capas personalizadas entrenadas espec√≠ficamente con videos de ejercicios correctos e incorrectos. Esto mejor√≥ la precisi√≥n en un 30%.

5. Suavizado de Detecciones
Problema: La detecci√≥n frame por frame puede ser ruidosa, causando que los puntos "tiemblen" incluso cuando el usuario est√° quieto.

Soluci√≥n: Implement√© un filtro de Kalman para suavizar las trayectorias de los puntos clave. Tambi√©n us√© un filtro de mediana m√≥vil para eliminar detecciones an√≥malas (outliers).

üìä Pipeline de Procesamiento

El flujo completo del sistema es:

1. Captura de Video: OpenCV captura frames a 30 FPS
2. Detecci√≥n de Poses: MediaPipe procesa cada frame y extrae los 33 landmarks
3. Normalizaci√≥n: Los puntos se normalizan para ser invariantes a escala y posici√≥n
4. Filtrado: Aplicaci√≥n de filtros de suavizado
5. An√°lisis de √Ångulos: C√°lculo de √°ngulos entre articulaciones clave
6. Clasificaci√≥n: El modelo de TensorFlow determina si la pose es correcta
7. Feedback: El sistema genera retroalimentaci√≥n visual y auditiva
8. Actualizaci√≥n de Estado: Si se complet√≥ una repetici√≥n correctamente, se incrementa el contador

üéì T√©cnicas de Machine Learning Aplicadas

Para el componente de clasificaci√≥n de ejercicios, implement√©:

‚Ä¢ Red Neuronal Convolucional (CNN): Para clasificar secuencias de poses como "correctas" o "incorrectas"
‚Ä¢ LSTM (Long Short-Term Memory): Para analizar la secuencia temporal de movimientos y detectar patrones
‚Ä¢ Ensemble Learning: Combin√© m√∫ltiples modelos para mejorar la precisi√≥n general
‚Ä¢ Data Augmentation: Gener√© variaciones artificiales de los datos de entrenamiento (rotaciones, flips, cambios de escala) para hacer el modelo m√°s robusto

üß™ Entrenamiento del Modelo

El proceso de entrenamiento fue iterativo:

1. Recolecci√≥n de Datos: Grab√© videos de personas haciendo ejercicios correcta e incorrectamente. En total, recopil√© m√°s de 2,000 videos de diferentes ejercicios.

2. Etiquetado: Cada video fue etiquetado manualmente indicando si la ejecuci√≥n era correcta y qu√© errores espec√≠ficos conten√≠a.

3. Extracci√≥n de Features: Proces√© cada video con MediaPipe para extraer las secuencias de landmarks.

4. Divisi√≥n de Datos: 70% para entrenamiento, 15% para validaci√≥n, 15% para testing.

5. Entrenamiento: Us√© t√©cnicas de regularizaci√≥n (dropout, L2) para evitar overfitting. El entrenamiento tom√≥ aproximadamente 8 horas en una GPU NVIDIA.

6. Evaluaci√≥n: Alcanc√© una precisi√≥n del 94% en el conjunto de test, con un recall del 92% para detecci√≥n de ejercicios incorrectos.

üí° Ejercicios Implementados

El sistema actualmente soporta:
‚Ä¢ Sentadillas (Squats)
‚Ä¢ Flexiones de pecho (Push-ups)
‚Ä¢ Abdominales (Crunches)
‚Ä¢ Planchas (Planks)
‚Ä¢ Estocadas (Lunges)
‚Ä¢ Elevaciones laterales (Lateral raises)

Cada ejercicio tiene su propio modelo de validaci√≥n con reglas espec√≠ficas sobre √°ngulos y posiciones correctas.

üéØ Resultados e Impacto

Los resultados han sido impresionantes:

‚Ä¢ Precisi√≥n de Detecci√≥n: 94% en condiciones normales, 89% en condiciones desafiantes
‚Ä¢ Latencia: Menos de 50ms por frame (procesamiento en tiempo real)
‚Ä¢ Satisfacci√≥n de Usuarios: 4.7/5 estrellas en pruebas beta
‚Ä¢ Reducci√≥n de Lesiones: Los usuarios reportan mejor t√©cnica y menos molestias

El sistema ha demostrado ser especialmente √∫til para principiantes que est√°n aprendiendo la t√©cnica correcta y para usuarios avanzados que quieren mantener su forma durante entrenamientos de alta intensidad.

üîÆ Futuro del Proyecto

Las pr√≥ximas mejoras incluyen:

‚Ä¢ Soporte para m√°s ejercicios (sentadilla b√∫lgara, peso muerto, etc.)
‚Ä¢ Integraci√≥n con wearables para datos de frecuencia card√≠aca
‚Ä¢ Modo de entrenamiento personalizado con rutinas generadas por IA
‚Ä¢ An√°lisis de video post-entrenamiento con gr√°ficos de √°ngulos y trayectorias
‚Ä¢ Modo multiplayer para entrenar con amigos
‚Ä¢ Exportaci√≥n de datos para an√°lisis biomec√°nico profesional

La combinaci√≥n de visi√≥n por computadora, machine learning, y procesamiento en tiempo real ha creado una herramienta poderosa para democratizar el acceso a entrenamiento de calidad. EvoFit demuestra c√≥mo la IA puede ser aplicada de manera pr√°ctica para resolver problemas reales y mejorar la vida de las personas.`,
      date: "2024-11-10",
      readTime: 10,
      tags: ["Python", "AI", "Computer Vision"],
      image: "/BlogArticles/IAFitness.png"
    }
  ];

  const openArticle = (article: Article) => {
    setSelectedArticle(article);
    setReadProgress(0);
    // Ocultar navegaci√≥n y scrollbar
    const nav = document.getElementById('main-nav');
    if (nav) nav.style.display = 'none';
    document.body.style.overflow = 'hidden';
  };

  const closeArticle = () => {
    setSelectedArticle(null);
    setReadProgress(0);
    // Mostrar navegaci√≥n y scrollbar
    const nav = document.getElementById('main-nav');
    if (nav) nav.style.display = 'flex';
    document.body.style.overflow = '';
  };

  // Simular progreso de lectura
  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const element = e.currentTarget;
    const scrollTop = element.scrollTop;
    const scrollHeight = element.scrollHeight - element.clientHeight;
    const progress = (scrollTop / scrollHeight) * 100;
    setReadProgress(Math.min(progress, 100));
  };

  return (
    <div className="w-full space-y-6">
      <div>
        <h3 className="text-[var(--white)] text-3xl md:text-4xl font-semibold mb-4">
          Blog & Art√≠culos
        </h3>
        <p className="text-[var(--white-icon)] text-sm md:text-base">
          Experiencias, aprendizajes y tutoriales t√©cnicos
        </p>
      </div>

      {/* Grid de Art√≠culos */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {articles.map((article, index) => (
          <article
            key={article.id}
            className="group bg-[var(--card)] border border-[var(--white-icon-tr)] rounded-xl overflow-hidden hover:border-[var(--sec)] transition-all duration-300 cursor-pointer hover:transform hover:-translate-y-2 hover:shadow-[0_10px_30px_rgba(164,118,255,0.2)]"
            onClick={() => openArticle(article)}
          >
            {/* Imagen */}
            <div className="relative h-48 overflow-hidden">
              <img 
                src={article.image} 
                alt={article.title}
                className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
              <div className="absolute bottom-3 left-3 right-3">
                <div className="flex gap-2 flex-wrap">
                  {article.tags.map(tag => (
                    <span key={tag} className="px-2 py-1 bg-[var(--sec)] text-white text-xs rounded-full">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </div>

            {/* Contenido */}
            <div className="p-4 space-y-3">
              <h4 className="text-[var(--white)] text-lg font-semibold line-clamp-2 group-hover:text-[var(--sec)] transition-colors">
                {article.title}
              </h4>
              <p className="text-[var(--white-icon)] text-sm line-clamp-3">
                {article.excerpt}
              </p>
              
              {/* Meta info */}
              <div className="flex items-center justify-between text-xs text-[var(--white-icon)] pt-2 border-t border-[var(--white-icon-tr)]">
                <span className="flex items-center gap-1">
                  üìÖ {new Date(article.date).toLocaleDateString('es-ES', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric' 
                  })}
                </span>
                <span className="flex items-center gap-1">
                  ‚è±Ô∏è {article.readTime} min
                </span>
              </div>
            </div>
          </article>
        ))}
      </div>

      {/* Modal de Art√≠culo */}
      {selectedArticle && (
        <div className="fixed inset-0 z-[10200]" aria-hidden="false" onClick={closeArticle}>
          {/* Backdrop */}
          <div className="absolute inset-0 bg-black/70 backdrop-blur-sm"></div>
          
          {/* Barra de progreso de lectura */}
          <div className="fixed top-0 left-0 right-0 h-1 bg-[var(--card)] z-10">
            <div 
              className="h-full bg-gradient-to-r from-[var(--sec)] to-[#8a5dd6] transition-all duration-100"
              style={{ width: `${readProgress}%` }}
            />
          </div>

          {/* Contenedor centrado */}
          <div className="relative h-full w-full flex items-center justify-center p-4" onClick={(e) => e.stopPropagation()}>
            <div className="w-full max-w-4xl bg-[#0f0f0f] rounded-2xl border border-[var(--white-icon-tr)] shadow-2xl overflow-hidden">
              {/* Header */}
              <div className="flex items-start justify-between p-4 border-b border-[#ffffff10]">
                <div className="flex-1 mr-4">
                  <div className="flex gap-2 mb-3 flex-wrap">
                    {selectedArticle.tags.map(tag => (
                      <span key={tag} className="px-3 py-1 bg-[var(--sec)] text-white text-xs rounded-full">
                        {tag}
                      </span>
                    ))}
                  </div>
                  <h2 className="text-2xl font-semibold mb-2 text-[var(--white)]">
                    {selectedArticle.title}
                  </h2>
                  <div className="flex flex-wrap items-center gap-3 text-xs text-[var(--white-icon)]">
                    <span>üìÖ {new Date(selectedArticle.date).toLocaleDateString('es-ES', { 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    })}</span>
                    <span>‚è±Ô∏è {selectedArticle.readTime} min</span>
                    <span>üìä {Math.round(readProgress)}%</span>
                  </div>
                </div>
                <button
                  onClick={closeArticle}
                  className="text-[var(--white-icon)] hover:text-[var(--white)] transition p-2 flex-shrink-0"
                  aria-label="Cerrar"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
                    <path d="M18.3 5.71L12 12.01l-6.3-6.3-1.41 1.41 6.3 6.3-6.3 6.3 1.41 1.41 6.3-6.3 6.29 6.29 1.41-1.41-6.29-6.29 6.29-6.29-1.41-1.41z"/>
                  </svg>
                </button>
              </div>

              {/* Contenido con scroll */}
              <div 
                className="overflow-y-auto p-4"
                style={{ maxHeight: '55vh', minHeight: '400px' }}
                onScroll={handleScroll}
              >
                <img 
                  src={selectedArticle.image} 
                  alt={selectedArticle.title}
                  className="w-full h-64 object-cover rounded-xl mb-6"
                />
                <div className="prose prose-invert max-w-none">
                  <div className="text-[var(--white-icon)] text-base leading-relaxed whitespace-pre-line">
                    {selectedArticle.content}
                  </div>
                </div>
              </div>

              {/* Footer con info adicional */}
              <div className="p-3 flex items-center justify-between gap-3 border-t border-[#ffffff10]">
                <div className="text-xs text-[var(--white-icon)]">
                  Art√≠culo escrito el {new Date(selectedArticle.date).toLocaleDateString('es-ES')}
                </div>
                <div className="text-xs text-[var(--sec)] font-semibold">
                  {Math.round(readProgress)}% le√≠do
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BlogArticles;

