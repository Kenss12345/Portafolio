---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Inicio",
    href: "#home",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`,
  },
  {
    label: "Stack",
    href: "#stack",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M3.78307 2.82598L12 1L20.2169 2.82598C20.6745 2.92766 21 3.33347 21 3.80217V13.7889C21 15.795 19.9974 17.6684 18.3282 18.7812L12 23L5.6718 18.7812C4.00261 17.6684 3 15.795 3 13.7889V3.80217C3 3.33347 3.32553 2.92766 3.78307 2.82598ZM5 4.60434V13.7889C5 15.1263 5.6684 16.3752 6.7812 17.1171L12 20.5963L17.2188 17.1171C18.3316 16.3752 19 15.1263 19 13.7889V4.60434L12 3.04879L5 4.60434Z"></path></svg>`,
  },
  {
    label: "Proyectos",
    href: "#projects",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M4 5V19H20V7H11.5858L9.58579 5H4ZM12.4142 5H21C21.5523 5 22 5.44772 22 6V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H10.4142L12.4142 5Z"></path></svg>`,
  },
  {
    label: "Blog",
    href: "#blog",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M3 3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3ZM20 7.23792L12.0718 14.338L4 7.21594V19H20V7.23792ZM4.51146 5L12.0619 11.662L19.501 5H4.51146Z"></path></svg>`,
  },
  {
    label: "Ahora",
    href: "#ahora",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM13 12H17V14H11V7H13V12Z"></path></svg>`,
  },
  {
    label: "Certificaciones",
    href: "#certificaciones",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M17 15.2454V22.1169C17 22.393 16.7761 22.617 16.5 22.617C16.4094 22.617 16.3205 22.5923 16.2428 22.5457L12 20L7.75725 22.5457C7.52046 22.6877 7.21333 22.6109 7.07125 22.3742C7.02463 22.2964 7 22.2075 7 22.1169V15.2454C5.17107 13.7793 4 11.5264 4 9C4 4.58172 7.58172 1 12 1C16.4183 1 20 4.58172 20 9C20 11.5264 18.8289 13.7793 17 15.2454ZM9 16.4185V19.4676L12 17.6676L15 19.4676V16.4185C14.0736 16.7935 13.0609 17 12 17C10.9391 17 9.92639 16.7935 9 16.4185ZM12 15C15.3137 15 18 12.3137 18 9C18 5.68629 15.3137 3 12 3C8.68629 3 6 5.68629 6 9C6 12.3137 8.68629 15 12 15Z"></path></svg>`,
  },
  {
    label: "Contacto",
    href: "#contact",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21.7267 2.95694L16.2734 22.0432C16.1225 22.5716 15.7979 22.5956 15.5563 22.1126L11 13L1.9229 9.36919C1.41322 9.16532 1.41953 8.86022 1.95695 8.68108L21.0432 2.31901C21.5716 2.14285 21.8747 2.43866 21.7267 2.95694ZM19.0353 5.09647L6.81221 9.17085L12.4488 11.4255L15.4895 17.5068L19.0353 5.09647Z"></path></svg>`,
  },
];
---

<div class="flex justify-center w-full">
  <!-- Barra de progreso de scroll -->
  <div id="scroll-progress-bar" class="fixed top-0 left-0 h-1 bg-gradient-to-r from-[var(--sec)] via-[#c084ff] to-[var(--sec)] z-[101] transition-all duration-100" style="width: 0%"></div>
  
  <nav
    id="main-nav"
    class="fixed flex left-0 right-0 z-[100] bg-[#1414149c] border border-1 border-[var(--white-icon-tr)] backdrop-blur-xl transition-all duration-500 ease-in-out md:top-0 md:bottom-auto bottom-0 md:max-w-5xl md:w-auto rounded-t-2xl md:rounded-full md:mt-6 md:justify-self-center"
  >
    <div class="container mx-auto flex justify-between items-center p-3 px-4 md:px-6">
      <ul
        class="flex justify-between md:space-x-2 md:justify-center md:gap-4 gap-3 flex-1 md:flex-none"
      >
        {
          navItems.map((item) => (
            <li class="flex-1 md:flex-none">
              <a
                href={item.href}
                class="flex flex-col items-center gap-1 text-[var(--white-icon)] hover:text-[var(--white)] transition-colors text-[10px] md:text-sm md:px-2"
              >
                <span class="md:hidden flex items-center justify-center w-5 h-5">
                  <fragment set:html={item.icon} />
                </span>
                <span class="hidden md:inline-block">{item.label}</span>
                <span class="md:hidden leading-tight">{item.label}</span>
              </a>
            </li>
          ))
        }
      </ul>
      
      <!-- Collapse Toggle Button (only visible on desktop) -->
      <button
        id="collapse-toggle"
        class="hidden md:flex ml-2 items-center justify-center w-10 h-10 rounded-full bg-[var(--sec)] border border-[var(--sec)] hover:bg-[#8a5dd6] transition-all duration-300"
        aria-label="Retraer navegador"
        title="Retraer/Expandir navegador"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-white transition-all duration-300">
          <path d="M10.8284 12.0007L15.7782 16.9504L14.364 18.3646L8 12.0007L14.364 5.63672L15.7782 7.05093L10.8284 12.0007Z"></path>
        </svg>
      </button>
      
      <!-- Sound Toggle Button -->
      <button
        id="sound-toggle"
        class="ml-2 md:ml-3 flex items-center justify-center w-9 h-9 md:w-10 md:h-10 rounded-full bg-[var(--card)] border border-[var(--white-icon-tr)] hover:border-[var(--sec)] transition-all duration-300"
        aria-label="Toggle sound"
        title="Activar/Desactivar sonidos"
      >
        <svg id="sound-on-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-[var(--white-icon)] transition-all duration-300">
          <path d="M5.88889 16H2C1.44772 16 1 15.5523 1 15V9C1 8.44772 1.44772 8 2 8H5.88889L11.1834 3.66815C11.3971 3.49329 11.7121 3.52479 11.887 3.73851C11.9601 3.82784 12 3.93971 12 4.05519V19.9448C12 20.221 11.7761 20.4448 11.5 20.4448C11.3845 20.4448 11.2726 20.4049 11.1834 20.3319L5.88889 16ZM20.4142 12L23.9497 15.5355L22.5355 16.9497L19 13.4142L15.4645 16.9497L14.0503 15.5355L17.5858 12L14.0503 8.46447L15.4645 7.05025L19 10.5858L22.5355 7.05025L23.9497 8.46447L20.4142 12Z"></path>
        </svg>
        <svg id="sound-off-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-[var(--white-icon)] transition-all duration-300 hidden">
          <path d="M5.88889 16H2C1.44772 16 1 15.5523 1 15V9C1 8.44772 1.44772 8 2 8H5.88889L11.1834 3.66815C11.3971 3.49329 11.7121 3.52479 11.887 3.73851C11.9601 3.82784 12 3.93971 12 4.05519V19.9448C12 20.221 11.7761 20.4448 11.5 20.4448C11.3845 20.4448 11.2726 20.4049 11.1834 20.3319L5.88889 16ZM18.8631 16.5911L17.4411 15.1691C18.3892 14.4376 19 13.2902 19 12C19 10.7098 18.3892 9.56239 17.4411 8.83089L18.8631 7.40889C20.1606 8.49723 21 10.1521 21 12C21 13.8479 20.1606 15.5028 18.8631 16.5911ZM21.8407 19.5683L20.4187 18.1463C22.1485 16.7014 23.25 14.4789 23.25 12C23.25 9.52115 22.1485 7.29865 20.4187 5.85371L21.8407 4.43171C24.0069 6.26428 25.25 9.01257 25.25 12C25.25 14.9874 24.0069 17.7357 21.8407 19.5683Z"></path>
        </svg>
      </button>
      
      <!-- Theme Toggle Button -->
      <button
        id="theme-toggle"
        class="ml-2 flex items-center justify-center w-9 h-9 md:w-10 md:h-10 rounded-full bg-[var(--card)] border border-[var(--white-icon-tr)] hover:border-[var(--sec)] transition-all duration-300"
        aria-label="Toggle theme"
      >
        <svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-[var(--white-icon)] transition-all duration-300">
          <path d="M12 18C8.68629 18 6 15.3137 6 12C6 8.68629 8.68629 6 12 6C15.3137 6 18 8.68629 18 12C18 15.3137 15.3137 18 12 18ZM11 1H13V4H11V1ZM11 20H13V23H11V20ZM3.51472 4.92893L4.92893 3.51472L7.05025 5.63604L5.63604 7.05025L3.51472 4.92893ZM16.9497 18.364L18.364 16.9497L20.4853 19.0711L19.0711 20.4853L16.9497 18.364ZM19.0711 3.51472L20.4853 4.92893L18.364 7.05025L16.9497 5.63604L19.0711 3.51472ZM5.63604 16.9497L7.05025 18.364L4.92893 20.4853L3.51472 19.0711L5.63604 16.9497ZM23 11V13H20V11H23ZM4 11V13H1V11H4Z"></path>
        </svg>
        <svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-[var(--white-icon)] transition-all duration-300 hidden">
          <path d="M10 7C10 10.866 13.134 14 17 14C18.9584 14 20.729 13.1957 21.9995 11.8995C22 11.933 22 11.9665 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C12.0335 2 12.067 2 12.1005 2.00049C10.8043 3.27098 10 5.04157 10 7Z"></path>
        </svg>
      </button>
    </div>
  </nav>

  <!-- Botón flotante para expandir cuando está colapsado (solo desktop) -->
  <button
    id="expand-fab"
    class="hidden fixed top-6 left-4 z-[100] items-center justify-center w-12 h-12 rounded-full bg-[#1414149c] border border-[var(--white-icon-tr)] backdrop-blur-xl hover:border-[var(--sec)] hover:bg-[var(--sec)]/20 transition-all duration-300 shadow-lg"
    aria-label="Expandir navegador"
    title="Expandir navegador"
  >
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 text-[var(--white-icon)]">
      <path d="M13.1717 12.0007L8.22192 7.05093L9.63614 5.63672L16.0001 12.0007L9.63614 18.3646L8.22192 16.9504L13.1717 12.0007Z"></path>
    </svg>
  </button>
</div>

<script>
  // Importar sistema de sonidos del objeto global
  declare global {
    interface Window {
      portfolioSounds?: {
        playClick: () => void;
        playNavigation: () => void;
        playHover: () => void;
      };
    }
  }

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = e.currentTarget as HTMLAnchorElement;
      const targetId = target.getAttribute("href")?.substring(1) || "";
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        // Reproducir sonido de navegación
        window.portfolioSounds?.playNavigation();
        targetElement.scrollIntoView({
          behavior: "smooth",
        });
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    // Observar tanto secciones como divs con id que están en el nav
    const sections = document.querySelectorAll("section[id='home'], section[id='projects'], section[id='contact'], div[id='stack'], section[id='blog'], section[id='ahora'], section[id='certificaciones']");
    const navLinks = document.querySelectorAll("nav a[href^='#']");
    
    // Usar un enfoque de scroll para detectar la sección más visible
    let ticking = false;

    function updateActiveNav() {
      const scrollPosition = window.scrollY + 100; // Offset para el nav fijo

      let currentSection = '';
      
      sections.forEach((section) => {
        const sectionTop = (section as HTMLElement).offsetTop;
        const sectionHeight = (section as HTMLElement).offsetHeight;
        
        if (scrollPosition >= sectionTop - 150 && scrollPosition < sectionTop + sectionHeight - 150) {
          currentSection = section.getAttribute('id') || '';
        }
      });

      // Si estamos al inicio de la página, activar "Inicio"
      if (window.scrollY < 100) {
        currentSection = 'home';
      }

      if (currentSection) {
        navLinks.forEach((link) => {
          link.classList.remove("active");
          if (link.getAttribute('href') === `#${currentSection}`) {
            link.classList.add("active");
          }
        });
      }

      ticking = false;
    }

    function requestTick() {
      if (!ticking) {
        window.requestAnimationFrame(updateActiveNav);
        ticking = true;
      }
    }

    window.addEventListener('scroll', requestTick);
    updateActiveNav(); // Llamada inicial
  });

  // ===== SOUND TOGGLE =====
  document.addEventListener("DOMContentLoaded", () => {
    const soundToggle = document.getElementById("sound-toggle");
    const soundOnIcon = document.getElementById("sound-on-icon");
    const soundOffIcon = document.getElementById("sound-off-icon");

    // Check for saved sound preference or default to 'true'
    const soundEnabled = localStorage.getItem("sound-enabled") !== "false";
    
    // Update icons based on current state
    if (!soundEnabled) {
      soundOnIcon?.classList.add("hidden");
      soundOffIcon?.classList.remove("hidden");
    }

    soundToggle?.addEventListener("click", () => {
      const newState = localStorage.getItem("sound-enabled") !== "false" ? "false" : "true";
      localStorage.setItem("sound-enabled", newState);
      
      // Reproducir sonido de click
      if (newState === "true") {
        window.portfolioSounds?.playClick();
      }

      // Animate icons
      if (newState === "false") {
        soundOnIcon?.classList.add("scale-0");
        setTimeout(() => {
          soundOnIcon?.classList.add("hidden");
          soundOffIcon?.classList.remove("hidden");
          soundOffIcon?.classList.add("scale-100");
        }, 150);
      } else {
        soundOffIcon?.classList.add("scale-0");
        setTimeout(() => {
          soundOffIcon?.classList.add("hidden");
          soundOnIcon?.classList.remove("hidden");
          soundOnIcon?.classList.add("scale-100");
        }, 150);
      }

      // Reset animations after transition
      setTimeout(() => {
        soundOnIcon?.classList.remove("scale-0", "scale-100");
        soundOffIcon?.classList.remove("scale-0", "scale-100");
      }, 300);
    });
  });

  // ===== THEME TOGGLE =====
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle");
    const sunIcon = document.getElementById("sun-icon");
    const moonIcon = document.getElementById("moon-icon");
    const html = document.documentElement;

    // Check for saved theme preference or default to 'dark'
    const currentTheme = localStorage.getItem("theme") || "dark";
    html.setAttribute("data-theme", currentTheme);
    
    // Update icons based on current theme
    if (currentTheme === "light") {
      sunIcon?.classList.add("hidden");
      moonIcon?.classList.remove("hidden");
    }

    themeToggle?.addEventListener("click", () => {
      const theme = html.getAttribute("data-theme") === "dark" ? "light" : "dark";
      html.setAttribute("data-theme", theme);
      localStorage.setItem("theme", theme);
      
      // Reproducir sonido de click
      window.portfolioSounds?.playClick();

      // Animate icons
      if (theme === "light") {
        sunIcon?.classList.add("rotate-180", "scale-0");
        setTimeout(() => {
          sunIcon?.classList.add("hidden");
          moonIcon?.classList.remove("hidden");
          moonIcon?.classList.add("rotate-0", "scale-100");
        }, 150);
      } else {
        moonIcon?.classList.add("rotate-180", "scale-0");
        setTimeout(() => {
          moonIcon?.classList.add("hidden");
          sunIcon?.classList.remove("hidden");
          sunIcon?.classList.add("rotate-0", "scale-100");
        }, 150);
      }

      // Reset animations after transition
      setTimeout(() => {
        sunIcon?.classList.remove("rotate-180", "scale-0", "rotate-0", "scale-100");
        moonIcon?.classList.remove("rotate-180", "scale-0", "rotate-0", "scale-100");
      }, 300);
    });
  });

  // ===== SCROLL PROGRESS BAR =====
  document.addEventListener("DOMContentLoaded", () => {
    const progressBar = document.getElementById("scroll-progress-bar");
    
    const updateProgressBar = () => {
      const scrollTotal = document.documentElement.scrollHeight - window.innerHeight;
      const scrollProgress = (window.scrollY / scrollTotal) * 100;
      if (progressBar) {
        progressBar.style.width = `${Math.min(scrollProgress, 100)}%`;
      }
    };

    window.addEventListener("scroll", updateProgressBar);
    updateProgressBar(); // Initial call
  });

  // ===== NAV COLLAPSE TOGGLE (Desktop only) =====
  document.addEventListener("DOMContentLoaded", () => {
    const mainNav = document.getElementById("main-nav");
    const collapseToggle = document.getElementById("collapse-toggle");
    const expandFab = document.getElementById("expand-fab");
    const collapseIcon = collapseToggle?.querySelector("svg");

    // Check for saved collapse state or default to 'false' (expanded)
    const isCollapsed = localStorage.getItem("nav-collapsed") === "true";
    
    // Apply initial state
    if (isCollapsed && window.innerWidth >= 768) {
      mainNav?.classList.add("nav-collapsed");
      expandFab?.classList.remove("hidden");
      expandFab?.classList.add("md:flex");
    }

    // Collapse toggle click
    collapseToggle?.addEventListener("click", () => {
      const collapsed = mainNav?.classList.contains("nav-collapsed");
      
      // Reproducir sonido de click
      window.portfolioSounds?.playClick();

      if (!collapsed) {
        // Colapsar
        mainNav?.classList.add("nav-collapsed");
        collapseIcon?.classList.add("rotate-180");
        localStorage.setItem("nav-collapsed", "true");
        
        // Mostrar FAB después de la animación
        setTimeout(() => {
          expandFab?.classList.remove("hidden");
          expandFab?.classList.add("md:flex");
        }, 300);
      } else {
        // Expandir
        mainNav?.classList.remove("nav-collapsed");
        collapseIcon?.classList.remove("rotate-180");
        expandFab?.classList.remove("md:flex");
        expandFab?.classList.add("hidden");
        localStorage.setItem("nav-collapsed", "false");
      }
    });

    // Expand FAB click
    expandFab?.addEventListener("click", () => {
      // Reproducir sonido de click
      window.portfolioSounds?.playClick();
      
      mainNav?.classList.remove("nav-collapsed");
      collapseIcon?.classList.remove("rotate-180");
      expandFab?.classList.remove("md:flex");
      expandFab?.classList.add("hidden");
      localStorage.setItem("nav-collapsed", "false");
    });

    // Reset on window resize to mobile
    window.addEventListener("resize", () => {
      if (window.innerWidth < 768) {
        mainNav?.classList.remove("nav-collapsed");
        expandFab?.classList.add("hidden");
        expandFab?.classList.remove("md:flex");
      }
    });
  });
</script>

<style>
  @media (max-width: 767px) {
    body {
      padding-bottom: 70px;
    }
  }

  nav a.active {
    color: white !important;
  }

  /* Nav collapse styles (desktop only) */
  @media (min-width: 768px) {
    #main-nav {
      transform-origin: center center;
    }

    #main-nav.nav-collapsed {
      transform: translateX(-120%) !important;
      opacity: 0;
      pointer-events: none;
    }

    #expand-fab {
      transform: translateX(-100px);
      opacity: 0;
      animation: slideInFromLeft 0.4s ease-out 0.3s forwards;
    }

    @keyframes slideInFromLeft {
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }

    /* Hover effect for expand FAB */
    #expand-fab:hover {
      transform: translateX(0) scale(1.05);
    }

    #expand-fab:active {
      transform: translateX(0) scale(0.95);
    }

    /* Animación del ícono de colapsar */
    #collapse-toggle svg {
      transition: transform 0.3s ease;
    }
  }
</style>
