---
interface ProjectData {
  title: string;
  description: string;
  folder: string;
  images: string[];
  cover: string | null;
  technologies: string[];
  repoUrl?: string;
  demoUrl?: string;
}

interface ProjectStats {
  duration: string;
  linesOfCode: string;
  status: string;
}

interface ProjectData {
  title: string;
  description: string;
  folder: string;
  images: string[];
  cover: string | null;
  technologies: string[];
  repoUrl?: string;
  demoUrl?: string;
  stats?: ProjectStats;
}

const projects: ProjectData[] = [
  {
    title: "Portafolio Interactivo",
    description:
      "Portafolio personal interactivo y moderno con animaciones avanzadas, efectos visuales, y una experiencia de usuario excepcional.",
    folder: "Portafolio",
    technologies: ["TypeScript", "JavaScript", "Astro", "React", "Tailwind"],
    stats: {
      duration: "2 meses",
      linesOfCode: "10K+",
      status: "En desarrollo"
    },
    images: [
      "/Portafolio/Portafolio.png",
      "/Portafolio/Portafolio1.png",
      "/Portafolio/Portafolio2.png",
      "/Portafolio/Portafolio3.png",
      "/Portafolio/Portafolio4.png",
      "/Portafolio/Portafolio5.png"
    ],
    cover: "/Portafolio/Portafolio.png",
  },
  {
    title: "AppComu",
    description:
      "Aplicación móvil y web para la gestión de préstamos de equipos de la Facultad de Comunicaciones de la Universidad Continental.",
    folder: "AppComu",
    technologies: ["Dart", "C++", "CMake", "JavaScript", "Swift", "C", "Firebase"],
    stats: {
      duration: "4 meses",
      linesOfCode: "25K+",
      status: "Producción"
    },
    images: [
      "/AppComu/AppComu.png",
      "/AppComu/EquiposaCargo.png",
      "/AppComu/EquiposDiponibles.png",
      "/AppComu/PantalaGestor3.png",
      "/AppComu/PantallaGestor1.png",
      "/AppComu/PantallaGestor2.png",
      "/AppComu/PantallaGestor4.png",
      "/AppComu/Perfil.png",
      "/AppComu/Solicitud1.png",
      "/AppComu/Solicitud2.png",
      "/AppComu/Solicitud3.png"
    ],
    cover: "/AppComu/AppComu.png",
  },
  {
    title: "TravelEase",
    description:
      "Aplicación móvil para recomendación de rutas y medios de transporte en la ciudad de Huancayo.",
    folder: "TravelEase",
    technologies: ["C++", "Dart", "CMake", "Swift", "C", "HTML", "Firebase"],
    stats: {
      duration: "3 meses",
      linesOfCode: "12K+",
      status: "Completado"
    },
    images: [
      "/TravelEase/1TravelEase.png",
      "/TravelEase/Indicaciones.png",
      "/TravelEase/IndicacionesExpandida.png",
      "/TravelEase/Login.png",
      "/TravelEase/MapaHuancayo.png",
      "/TravelEase/PermisosUbicacion.png",
      "/TravelEase/RutaRecomendada.png",
      "/TravelEase/SeleccionPartidaLllegada.png"
    ],
    cover: "/TravelEase/1TravelEase.png",
  },
  {
    title: "EvoFit",
    description:
      "Aplicación web para realizar ejercicios con reconocimiento de movimientos y chatbot con IA como entrenador.",
    folder: "EvoFit",
    technologies: ["JavaScript", "Python", "CSS", "MongoDB"],
    stats: {
      duration: "2.5 meses",
      linesOfCode: "12K+",
      status: "En desarrollo"
    },
    images: [
      "/EvoFit/1EvoFit.png",
      "/EvoFit/EvoFit1.png",
      "/EvoFit/EvoFit2.png",
      "/EvoFit/EvoFit3.png",
      "/EvoFit/EvoFit4.png",
      "/EvoFit/EvoFit5.png",
      "/EvoFit/EvoFit6.png"
    ],
    cover: "/EvoFit/1EvoFit.png",
  },
];

// Mapeo de tecnologías a íconos
const techIcons: Record<string, string> = {
  "C++": "/svg/C++.svg",
  "C": "/svg/C.svg",
  "JavaScript": "/svg/javaScript.svg",
  "TypeScript": "/svg/typeScript.svg",
  "Python": "/svg/python.svg",
  "CSS": "/svg/CSS3.svg",
  "HTML": "/svg/HTML5.svg",
  "Dart": "/svg/dart.svg",
  "Swift": "/svg/swift.svg",
  "Firebase": "/svg/firebase.svg",
  "MongoDB": "/svg/mongodb.svg",
  "CMake": "/svg/cmake.svg",
  "Astro": "/svg/astro.svg",
  "React": "/svg/react.svg",
  "Tailwind": "/svg/tailwindcss.svg",
};
---

<section
  id="projects"
  class="py-12 border-t border-[#ffffff10] text-[var(--white)] relative overflow-hidden"
>
  <!-- Elementos de fondo con efecto parallax -->
  <div class="parallax-bg">
    <div class="parallax-shape parallax-shape-1" data-speed="0.3"></div>
    <div class="parallax-shape parallax-shape-2" data-speed="0.5"></div>
    <div class="parallax-shape parallax-shape-3" data-speed="0.2"></div>
    <div class="parallax-shape parallax-shape-4" data-speed="0.4"></div>
    <div class="parallax-circle parallax-circle-1" data-speed="0.6"></div>
    <div class="parallax-circle parallax-circle-2" data-speed="0.35"></div>
    <div class="parallax-line parallax-line-1" data-speed="0.25"></div>
    <div class="parallax-line parallax-line-2" data-speed="0.45"></div>
  </div>

  <div class="max-w-5xl mx-auto relative z-10">
    <h2 class="text-lg text-[var(--sec)] mb-2 shiny-sec scroll-reveal">Mi trabajo</h2>
    <h3 class="text-4xl md:text-5xl font-medium mb-8 scroll-reveal" style="transition-delay: 0.1s;">Proyectos</h3>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
      {
        projects.map((project, idx) => (
          <button
            type="button"
            class="group text-left rounded-2xl overflow-hidden border border-[var(--white-icon-tr)] bg-[var(--card)] hover:bg-[var(--card-hover)] transition duration-300 focus:outline-none project-card hover:shadow-[0_10px_30px_rgba(0,0,0,0.25)] hover:-translate-y-[2px] scroll-reveal"
            style={`transition-delay: ${0.2 + (idx * 0.1)}s;`}
            data-index={idx}
            aria-haspopup="dialog"
            aria-label={`Abrir ${project.title}`}
          >
            <div class="relative overflow-hidden">
              <div class="carousel-container w-full h-48 md:h-56 relative" data-carousel-index={idx}>
                {project.images.map((img, imgIdx) => (
                  <img 
                    src={img} 
                    alt={`${project.title} - imagen ${imgIdx + 1}`} 
                    class={`carousel-image absolute inset-0 w-full h-full object-cover transition-all duration-700 ease-in-out ${imgIdx === 0 ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-full'}`}
                    loading="lazy"
                    data-img-index={imgIdx}
                  />
                ))}
              </div>
              <div class="absolute inset-0 ring-0 group-hover:ring-2 ring-[var(--sec)] transition-all pointer-events-none"></div>
            </div>
            <div class="p-4 space-y-3">
              <h4 class="text-xl font-semibold">{project.title}</h4>
              <p class="text-sm text-[var(--white-icon)]">{project.description}</p>
              
              <!-- Estadísticas rápidas (visible en hover) -->
              {project.stats && (
                <div class="project-stats opacity-0 group-hover:opacity-100 transition-opacity duration-300 mt-3 pt-3 border-t border-[var(--white-icon-tr)]">
                  <div class="grid grid-cols-3 gap-2 text-center">
                    <div class="bg-[var(--card-hover)] rounded-lg p-2">
                      <div class="text-xs text-[var(--white-icon)] mb-1">Duración</div>
                      <div class="text-sm font-semibold text-[var(--sec)]">{project.stats.duration}</div>
                    </div>
                    <div class="bg-[var(--card-hover)] rounded-lg p-2">
                      <div class="text-xs text-[var(--white-icon)] mb-1">Código</div>
                      <div class="text-sm font-semibold text-[var(--sec)]">{project.stats.linesOfCode}</div>
                    </div>
                    <div class="bg-[var(--card-hover)] rounded-lg p-2">
                      <div class="text-xs text-[var(--white-icon)] mb-1">Estado</div>
                      <div class="text-xs font-semibold text-[var(--sec)] truncate">{project.stats.status}</div>
                    </div>
                  </div>
                </div>
              )}
              
              <div class="flex flex-wrap gap-2 pt-1">
                {project.technologies.map((tech) => (
                  <div class="flex items-center gap-1.5 px-2 py-1 bg-[var(--card-hover)] rounded-lg border border-[var(--white-icon-tr)] text-xs text-[var(--white-icon)] hover:text-[var(--white)] hover:border-[var(--sec)] transition-colors">
                    <img 
                      src={techIcons[tech]} 
                      alt={tech}
                      class="w-4 h-4 object-contain"
                      loading="lazy"
                    />
                    <span>{tech}</span>
                  </div>
                ))}
              </div>
            </div>
          </button>
        ))
      }
    </div>

  <div
    id="projects-modal"
    class="fixed inset-0 hidden z-[10100]"
    aria-hidden="true"
  >
      <div id="modal-backdrop" class="absolute inset-0 bg-black/70 backdrop-blur-sm"></div>
      <div class="relative h-full w-full flex items-center justify-center p-4">
        <div class="w-full max-w-4xl bg-[#0f0f0f] rounded-2xl border border-[var(--white-icon-tr)] shadow-2xl overflow-hidden">
          <div class="flex items-start justify-between p-4 border-b border-[#ffffff10]">
            <div class="flex-1 mr-4">
              <h4 id="modal-title" class="text-2xl font-semibold mb-2"></h4>
              <p id="modal-description" class="text-sm text-[var(--white-icon)] mb-3"></p>
              <div id="modal-technologies" class="flex flex-wrap gap-2"></div>
            </div>
            <button id="modal-close" class="text-[var(--white-icon)] hover:text-[var(--white)] transition p-2 flex-shrink-0" aria-label="Cerrar">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6"><path d="M18.3 5.71L12 12.01l-6.3-6.3-1.41 1.41 6.3 6.3-6.3 6.3 1.41 1.41 6.3-6.3 6.29 6.29 1.41-1.41-6.29-6.29 6.29-6.29-1.41-1.41z"/></svg>
            </button>
          </div>
          <div class="relative">
            <button id="modal-prev" class="absolute left-2 top-1/2 -translate-y-1/2 z-10 p-3 rounded-full bg-black/50 hover:bg-black/70 text-white" aria-label="Anterior">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6"><path d="M15.41 7.41 14 6l-6 6 6 6 1.41-1.41L10.83 12z"/></svg>
            </button>
            <button id="modal-next" class="absolute right-2 top-1/2 -translate-y-1/2 z-10 p-3 rounded-full bg-black/50 hover:bg-black/70 text-white" aria-label="Siguiente">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6"><path d="M8.59 16.59 10 18l6-6-6-6-1.41 1.41L13.17 12z"/></svg>
            </button>
            <img id="modal-image" src="" alt="Proyecto" class="w-full h-[55vh] object-contain bg-black" style="min-height: 400px;" />
            <div class="absolute bottom-2 left-1/2 -translate-x-1/2 text-xs text-[var(--white-icon)] bg-black/50 px-2 py-1 rounded-full"><span id="modal-counter">1 / 1</span></div>
          </div>

          <div class="p-4 border-t border-[#ffffff10] bg-[#0f0f0f]">
            <div id="modal-thumbs" class="flex gap-2 overflow-x-auto"></div>
          </div>

          <div class="p-3 flex flex-wrap items-center justify-between gap-3 border-t border-[#ffffff10]">
            <div class="text-xs text-[var(--white-icon)]">Usa las flechas o desliza para navegar</div>
            <div class="flex flex-wrap gap-2">
              <a id="modal-repo" href="#" target="_blank" rel="noopener noreferrer" class="hidden px-3 py-1 text-sm border border-[var(--white-icon-tr)] rounded-lg text-[var(--white-icon)] hover:text-white hover:bg-[var(--white-icon-tr)]">Ver repo</a>
              <a id="modal-demo" href="#" target="_blank" rel="noopener noreferrer" class="hidden px-3 py-1 text-sm border border-[var(--white-icon-tr)] rounded-lg text-[var(--white-icon)] hover:text-white hover:bg-[var(--white-icon-tr)]">Ver demo</a>
              <button id="modal-zoomout" class="px-3 py-1 text-sm border border-[var(--white-icon-tr)] rounded-lg text-[var(--white-icon)] hover:text-white hover:bg-[var(--white-icon-tr)]">Ajustar</button>
              <button id="modal-zoomin" class="px-3 py-1 text-sm border border-[var(--white-icon-tr)] rounded-lg text-[var(--white-icon)] hover:text-white hover:bg-[var(--white-icon-tr)]">Ampliar</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script type="application/json" id="projects-data" is:inline set:html={JSON.stringify(projects)}></script>
    <script>
      // Esperamos a que el DOM esté completamente cargado
      document.addEventListener('DOMContentLoaded', function() {
        const modalEl = document.getElementById('projects-modal');
        const backdropEl = document.getElementById('modal-backdrop');
        const titleEl = document.getElementById('modal-title');
        const descEl = document.getElementById('modal-description');
        const imgEl = document.getElementById('modal-image');
        const counterEl = document.getElementById('modal-counter');
        const closeBtn = document.getElementById('modal-close');
        const prevBtn = document.getElementById('modal-prev');
        const nextBtn = document.getElementById('modal-next');
        const zoomInBtn = document.getElementById('modal-zoomin');
        const zoomOutBtn = document.getElementById('modal-zoomout');
        const thumbsEl = document.getElementById('modal-thumbs');
        const techEl = document.getElementById('modal-technologies');
        const repoBtn = document.getElementById('modal-repo');
        const demoBtn = document.getElementById('modal-demo');

        const dataScript = document.getElementById('projects-data');
        const projectsData = dataScript ? JSON.parse(dataScript.textContent || '[]') : [];
        
        console.log('Proyectos cargados:', projectsData); // Debug
        
        // Verificar que las imágenes existen
        projectsData.forEach((project, idx) => {
          console.log(`Proyecto ${idx} (${project.title}):`, project.images?.length || 0, 'imágenes');
        });

        let currentProjectIndex = 0;
        let currentImageIndex = 0;

        // Mapeo de tecnologías a íconos (igual que en el componente Astro)
        const techIcons = {
          "C++": "/svg/C++.svg",
          "C": "/svg/C.svg",
          "JavaScript": "/svg/javaScript.svg",
          "Python": "/svg/python.svg",
          "CSS": "/svg/CSS3.svg",
          "HTML": "/svg/HTML5.svg",
          "Dart": "/svg/dart.svg",
          "Swift": "/svg/swift.svg",
          "Firebase": "/svg/firebase.svg",
          "MongoDB": "/svg/mongodb.svg",
          "CMake": "/svg/cmake.svg",
        };

        function renderTechnologies(technologies) {
          if (!techEl || !Array.isArray(technologies)) return;
          techEl.innerHTML = technologies
            .map(tech => `
              <div class="flex items-center gap-1.5 px-2 py-1 bg-[#1a1a1a] rounded-md border border-[var(--white-icon-tr)] text-xs text-[var(--white-icon)]">
                <img src="${techIcons[tech] || ''}" alt="${tech}" class="w-3 h-3 object-contain" />
                <span>${tech}</span>
              </div>
            `)
            .join('');
        }

        function renderThumbs(images) {
          if (!thumbsEl) return;
          if (!Array.isArray(images)) return;
          thumbsEl.innerHTML = images
            .map((src, i) => `
              <button type="button" data-thumb-index="${i}" class="shrink-0 w-14 h-14 rounded-md overflow-hidden border ${i === currentImageIndex ? 'border-[var(--sec)]' : 'border-[var(--white-icon-tr)]'} hover:border-[var(--sec)] transition">
                <img src="${src}" alt="thumb ${i + 1}" class="w-full h-full object-cover" loading="lazy" />
              </button>
            `)
            .join('');
          const buttons = Array.from(thumbsEl.querySelectorAll('[data-thumb-index]'));
          buttons.forEach((b) => {
            b.addEventListener('click', () => {
              const idx = b.getAttribute('data-thumb-index');
              const n = idx ? parseInt(idx, 10) : 0;
              currentImageIndex = n;
              updateModal();
            });
          });
        }

        function updateLinks(p) {
          if (repoBtn) {
            if (p && p.repoUrl) {
              repoBtn.classList.remove('hidden');
              repoBtn.setAttribute('href', p.repoUrl);
            } else {
              repoBtn.classList.add('hidden');
              repoBtn.setAttribute('href', '#');
            }
          }
          if (demoBtn) {
            if (p && p.demoUrl) {
              demoBtn.classList.remove('hidden');
              demoBtn.setAttribute('href', p.demoUrl);
            } else {
              demoBtn.classList.add('hidden');
              demoBtn.setAttribute('href', '#');
            }
          }
        }

        function updateModal() {
          const p = projectsData[currentProjectIndex];
          if (!p) return;
          console.log('Actualizando modal para proyecto:', p); // Debug
          if (titleEl) titleEl.textContent = p.title;
          if (descEl) descEl.textContent = p.description;
          renderTechnologies(p.technologies || []);
          const images = p.images || [];
          console.log('Imágenes del proyecto:', images); // Debug
          if (images.length === 0) return;
          currentImageIndex = Math.max(0, Math.min(currentImageIndex, images.length - 1));
          if (imgEl instanceof HTMLImageElement) {
            imgEl.src = images[currentImageIndex];
            imgEl.style.objectFit = 'contain';
            console.log('Imagen cargada:', images[currentImageIndex]); // Debug
          }
          if (counterEl) counterEl.textContent = `${currentImageIndex + 1} / ${images.length}`;
          renderThumbs(images);
          updateLinks(p);
        }

        function openModal(index) {
          console.log('Abriendo modal para proyecto:', index); // Debug
          currentProjectIndex = index;
          currentImageIndex = 0;
          updateModal();
          if (modalEl) {
            modalEl.classList.remove('hidden');
            modalEl.setAttribute('aria-hidden', 'false');
            document.body.style.overflow = 'hidden';
            // Ocultar navegación
            const nav = document.getElementById('main-nav');
            if (nav) nav.style.display = 'none';
          }
        }

        function closeModal() {
          if (modalEl) {
            modalEl.classList.add('hidden');
            modalEl.setAttribute('aria-hidden', 'true');
            document.body.style.overflow = '';
            // Mostrar navegación
            const nav = document.getElementById('main-nav');
            if (nav) nav.style.display = 'flex';
          }
        }

        const cardButtons = Array.from(document.querySelectorAll('.project-card'));
        console.log('Botones encontrados:', cardButtons.length); // Debug
        
        cardButtons.forEach((btn) => {
          btn.addEventListener('click', () => {
            const index = (btn instanceof HTMLElement && btn.dataset.index) ? parseInt(btn.dataset.index, 10) : -1;
            console.log('Click en proyecto índice:', index); // Debug
            if (index >= 0) openModal(index);
          });
        });

        if (closeBtn) closeBtn.addEventListener('click', closeModal);
        
        if (modalEl) {
          modalEl.addEventListener('click', (e) => {
            if (e.target === backdropEl) {
              closeModal();
            }
          });
        }
        
        document.addEventListener('keydown', (e) => {
          if (!modalEl || modalEl.classList.contains('hidden')) return;
          if (e.key === 'Escape') closeModal();
          if (e.key === 'ArrowRight') { nextBtn?.click(); }
          if (e.key === 'ArrowLeft') { prevBtn?.click(); }
        });

        if (prevBtn) {
          prevBtn.addEventListener('click', () => {
            const images = projectsData[currentProjectIndex]?.images || [];
            if (images.length === 0) return;
            currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
            updateModal();
          });
        }
        
        if (nextBtn) {
          nextBtn.addEventListener('click', () => {
            const images = projectsData[currentProjectIndex]?.images || [];
            if (images.length === 0) return;
            currentImageIndex = (currentImageIndex + 1) % images.length;
            updateModal();
          });
        }

        if (zoomInBtn) {
          zoomInBtn.addEventListener('click', () => {
            if (imgEl instanceof HTMLImageElement) imgEl.style.objectFit = 'cover';
          });
        }
        
        if (zoomOutBtn) {
          zoomOutBtn.addEventListener('click', () => {
            if (imgEl instanceof HTMLImageElement) imgEl.style.objectFit = 'contain';
          });
        }

        // Swipe para dispositivos táctiles
        let startX = 0;
        if (imgEl) {
          imgEl.addEventListener('touchstart', (e) => { startX = e.touches[0].clientX; }, { passive: true });
          imgEl.addEventListener('touchend', (e) => {
            const endX = e.changedTouches[0].clientX;
            const dx = endX - startX;
            if (Math.abs(dx) > 40) {
              if (dx < 0) nextBtn?.click(); else prevBtn?.click();
            }
          });
        }

        // Carrusel automático para las tarjetas de proyectos
        const carousels = document.querySelectorAll('.carousel-container');
        const carouselIntervals = [];
        
        carousels.forEach((carousel, carouselIdx) => {
          const images = carousel.querySelectorAll('.carousel-image');
          if (images.length <= 1) return;
          
          let currentIndex = 0;
          
          const rotateImages = () => {
            // Ocultar la imagen actual
            images[currentIndex].classList.remove('opacity-100', 'translate-x-0');
            images[currentIndex].classList.add('opacity-0', '-translate-x-full');
            
            // Calcular el siguiente índice
            currentIndex = (currentIndex + 1) % images.length;
            
            // Preparar la siguiente imagen desde la derecha
            images[currentIndex].classList.remove('-translate-x-full');
            images[currentIndex].classList.add('translate-x-full');
            
            // Pequeño delay para permitir que el navegador procese el cambio
            setTimeout(() => {
              // Mostrar la siguiente imagen
              images[currentIndex].classList.remove('opacity-0', 'translate-x-full');
              images[currentIndex].classList.add('opacity-100', 'translate-x-0');
            }, 50);
          };
          
          // Iniciar el carrusel automático cada 3 segundos
          const intervalId = setInterval(rotateImages, 3000);
          carouselIntervals.push(intervalId);
        });

        // Limpiar intervalos cuando se cierra la página
        window.addEventListener('beforeunload', () => {
          carouselIntervals.forEach(id => clearInterval(id));
        });
      }); // Cierre del DOMContentLoaded
    </script>

  </div>
</section>

<style>
  /* ===== HOVER AVANZADO EN PROYECTOS ===== */
  .project-card {
    position: relative;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .project-card:hover {
    transform: translateY(-8px) scale(1.02);
  }

  .project-card .carousel-container img {
    transition: transform 0.4s ease;
  }

  .project-card:hover .carousel-container img {
    transform: scale(1.05);
  }

  /* Efecto de brillo en hover */
  .project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(164, 118, 255, 0.1),
      transparent
    );
    transition: left 0.5s;
    pointer-events: none;
    z-index: 1;
  }

  .project-card:hover::before {
    left: 100%;
  }

  /* Animación de estadísticas */
  .project-stats {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, opacity 0.3s ease;
  }

  .project-card:hover .project-stats {
    max-height: 200px;
  }

  /* ===== EFECTOS PARALLAX ===== */
  .parallax-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    pointer-events: none;
    z-index: 0;
  }

  /* Formas geométricas flotantes */
  .parallax-shape {
    position: absolute;
    border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
    opacity: 0.03;
    background: linear-gradient(135deg, var(--sec), #8a5dd6);
    filter: blur(40px);
    will-change: transform;
  }

  .parallax-shape-1 {
    width: 400px;
    height: 400px;
    top: 10%;
    left: -10%;
    animation: float 20s ease-in-out infinite;
  }

  .parallax-shape-2 {
    width: 300px;
    height: 300px;
    top: 40%;
    right: -5%;
    animation: float 15s ease-in-out infinite reverse;
  }

  .parallax-shape-3 {
    width: 500px;
    height: 500px;
    bottom: 10%;
    left: 30%;
    animation: float 25s ease-in-out infinite;
  }

  .parallax-shape-4 {
    width: 250px;
    height: 250px;
    top: 60%;
    right: 20%;
    animation: float 18s ease-in-out infinite reverse;
  }

  /* Círculos decorativos */
  .parallax-circle {
    position: absolute;
    border-radius: 50%;
    border: 2px solid var(--sec);
    opacity: 0.05;
    will-change: transform;
  }

  .parallax-circle-1 {
    width: 200px;
    height: 200px;
    top: 20%;
    right: 15%;
    animation: rotate 30s linear infinite, pulse 3s ease-in-out infinite;
  }

  .parallax-circle-2 {
    width: 150px;
    height: 150px;
    bottom: 30%;
    left: 10%;
    animation: rotate 25s linear infinite reverse, pulse 4s ease-in-out infinite;
  }

  /* Líneas decorativas */
  .parallax-line {
    position: absolute;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--sec), transparent);
    opacity: 0.08;
    will-change: transform;
  }

  .parallax-line-1 {
    width: 60%;
    top: 25%;
    left: -20%;
    transform: rotate(-15deg);
    animation: slide 20s ease-in-out infinite;
  }

  .parallax-line-2 {
    width: 50%;
    bottom: 35%;
    right: -15%;
    transform: rotate(15deg);
    animation: slide 25s ease-in-out infinite reverse;
  }

  /* Animaciones */
  @keyframes float {
    0%, 100% {
      transform: translateY(0) rotate(0deg);
    }
    50% {
      transform: translateY(-30px) rotate(5deg);
    }
  }

  @keyframes rotate {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
      opacity: 0.05;
    }
    50% {
      transform: scale(1.1);
      opacity: 0.08;
    }
  }

  @keyframes slide {
    0%, 100% {
      transform: translateX(0) rotate(-15deg);
    }
    50% {
      transform: translateX(30px) rotate(-15deg);
    }
  }

  /* Ocultar en móviles para mejor performance */
  @media (max-width: 768px) {
    .parallax-bg {
      display: none;
    }
  }
</style>
