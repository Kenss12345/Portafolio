---
import ProjectsLightbox from "../React/ProjectsLightbox.tsx";
import ProjectOrbits from "../React/ProjectOrbits.tsx";
import { readdirSync } from "node:fs";
import { fileURLToPath } from "node:url";
import { dirname, join } from "node:path";
import { Image } from 'astro:assets';

interface ProjectData {
  title: string;
  description: string;
  folder: string;
  images: string[];
  cover: string | null;
  technologies: string[];
  repoUrl?: string;
  demoUrl?: string;
}

const currentDir = dirname(fileURLToPath(import.meta.url));
const publicDir = join(currentDir, "../../public");

const rawProjects = [
  {
    title: "AppComu",
    description:
      "Aplicación móvil y web para la gestión de préstamos de equipos de la Facultad de Comunicaciones de la Universidad Continental.",
    folder: "AppComu",
    technologies: ["Dart", "C++", "CMake", "JavaScript", "Swift", "C", "Firebase"],
  },
  {
    title: "TravelEase",
    description:
      "Aplicación móvil para recomendación de rutas y medios de transporte en la ciudad de Huancayo.",
    folder: "TravelEase",
    technologies: ["C++", "Dart", "CMake", "Swift", "C", "HTML", "Firebase"],
  },
  {
    title: "EvoFit",
    description:
      "Aplicación web para realizar ejercicios con reconocimiento de movimientos y chatbot con IA como entrenador.",
    folder: "EvoFit",
    technologies: ["JavaScript", "Python", "CSS", "MongoDB"],
  },
];

// Mapeo de tecnologías a íconos
const techIcons: Record<string, string> = {
  "C++": "/svg/C++.svg",
  "C": "/svg/C.svg",
  "JavaScript": "/svg/javaScript.svg",
  "Python": "/svg/python.svg",
  "CSS": "/svg/CSS3.svg",
  "HTML": "/svg/HTML5.svg",
  "Dart": "/svg/dart.svg",
  "Swift": "/svg/swift.svg",
  "Firebase": "/svg/firebase.svg",
  "MongoDB": "/svg/mongodb.svg",
  "CMake": "/svg/cmake.svg",
};

function readProjectImages(folder: string): string[] {
  try {
    const root = join(publicDir, folder);
    const exts = new Set([".png"]);
    const out: string[] = [];

    const walk = (dirAbs: string, relPath: string) => {
      const entries = readdirSync(dirAbs, { withFileTypes: true });
      for (const entry of entries) {
        if (entry.isDirectory()) {
          walk(join(dirAbs, entry.name), join(relPath, entry.name));
        } else if (entry.isFile()) {
          const nameLower = entry.name.toLowerCase();
          const dot = nameLower.lastIndexOf(".");
          const ext = dot >= 0 ? nameLower.slice(dot) : "";
          if (ext && exts.has(ext)) {
            out.push(`/${folder}/${relPath ? relPath + '/' : ''}${entry.name}`);
          }
        }
      }
    };
    walk(root, "");
    return out.sort();
  } catch (err) {
    return [];
  }
}

const projects: ProjectData[] = rawProjects
  .map((p) => {
    const images = readProjectImages(p.folder);
    return {
      ...p,
      images,
      cover: images.length > 0 ? images[0] : null,
      technologies: p.technologies,
    } as ProjectData;
  })
  .filter((p) => p.images.length > 0);
---

<section
  id="projects"
  class="py-12 border-t border-[#ffffff10] text-[var(--white)]"
>
  <div class="max-w-5xl mx-auto relative">
    <div class="absolute -top-10 right-0 left-0 pointer-events-none opacity-60">
      <ProjectOrbits client:load />
    </div>
    <h2 class="text-lg text-[var(--sec)] mb-2 shiny-sec reveal">Mi trabajo</h2>
    <h3 class="text-4xl md:text-5xl font-medium mb-8 reveal reveal-del-1">Proyectos</h3>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
      {
        projects.map((project, idx) => (
          <button
            type="button"
            class={`group text-left rounded-2xl overflow-hidden border border-[var(--white-icon-tr)] bg-[var(--card)] hover:bg-[var(--card-hover)] transition duration-300 focus:outline-none project-card hover:shadow-[0_10px_30px_rgba(0,0,0,0.25)] hover:-translate-y-[2px] ${idx % 3 === 0 ? 'reveal' : idx % 3 === 1 ? 'reveal reveal-del-1' : 'reveal reveal-del-2'}`}
            data-index={idx}
            data-project={JSON.stringify(project)}
            aria-haspopup="dialog"
            aria-label={`Abrir ${project.title}`}
            onclick={`window.openProjectLightbox && window.openProjectLightbox(${idx})`}
          >
            <div class="relative">
              {project.cover && (
                <img
                  src={project.cover}
                  alt={`${project.title} – portada`}
                  class="w-full h-48 md:h-56 object-cover group-hover:scale-[1.02] transition-transform duration-300"
                  loading={idx < 2 ? "eager" : "lazy"}
                  decoding="async"
                  width="400"
                  height="224"
                  sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw"
                />
              )}
              <div class="absolute inset-0 ring-0 group-hover:ring-2 ring-[var(--sec)] transition-all"></div>
            </div>
            <div class="p-4 space-y-3">
              <h4 class="text-xl font-semibold">{project.title}</h4>
              <p class="text-sm text-[var(--white-icon)]">{project.description}</p>
              <div class="flex flex-wrap gap-2 pt-1">
                {project.technologies.map((tech) => (
                  <div class="flex items-center gap-1.5 px-2 py-1 bg-[var(--card-hover)] rounded-lg border border-[var(--white-icon-tr)] text-xs text-[var(--white-icon)] hover:text-[var(--white)] hover:border-[var(--sec)] transition-colors">
                    <img 
                      src={techIcons[tech]} 
                      alt={tech}
                      class="w-4 h-4 object-contain"
                      loading="lazy"
                    />
                    <span>{tech}</span>
                  </div>
                ))}
              </div>
            </div>
          </button>
        ))
      }
    </div>
    <script type="application/json" id="projects-data" set:html={JSON.stringify(projects)}></script>
    <ProjectsLightbox client:load />

  </div>
</section>
