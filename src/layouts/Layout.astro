---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Software Developer" />
    <meta name="author" content="Kenss Lin Kadú Hilario Castro" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/png" href="/favicon.png" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="preload"
      as="style"
      href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
      media="print"
      onload="this.media='all'"
    />
    <noscript>
      <link
        rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap"
      />
    </noscript>

    <title>{title}</title>
  </head>
  <body class="bg-[--background] md:px-48 lg:px-20 px-9">
    <slot />
  </body>
</html>

<style is:global>
  :root {
    --background: #101010;
    --sec: #a476ff;
    --white: #dfdfdf;
    --white-icon: #f3f3f398;
    --white-icon-tr: #f3f3f310;
    --card: #1414149c;
    --card-hover: #1a1a1a;
  }

  * {
    font-family:
      "montserrat",
      -apple-system,
      system-ui,
      sans-serif;
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }

  *::selection {
    background-color: var(--sec);
    color: var(--background);
  }

  /* Scrollbar styles */

  ::-webkit-scrollbar {
    width: 15px;
  }

  ::-webkit-scrollbar-track {
    background: var(--container);
    border-radius: 30px;
  }

  ::-webkit-scrollbar-thumb {
    background: var(--background);
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: var(--pink);
  }

  /* Scrollbar styles for Firefox */
  * {
    scrollbar-width: thin;
    scrollbar-color: var(--line) var(--container);
  }

  /* Shiny text effect */
  .shiny-sec {
    background: linear-gradient(135deg, #a476ff 25%, #eee5ff 50%, #a476ff 75%);
    background-size: 400% 100%;
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    animation: shine 3s linear infinite;
  }

  @keyframes shine {
    0% {
      background-position: 100% 50%;
    }
    30%,
    70% {
      background-position: 0% 50%;
    }
  }

  /* Reveal animation */
  .reveal {
    opacity: 0;
    transform: translateY(20px);
    animation: reveal 0.6s ease-out forwards;
  }

  .reveal-del-1 {
    animation-delay: 0.1s;
  }

  .reveal-del-2 {
    animation-delay: 0.2s;
  }

  @keyframes reveal {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Animaciones de scroll reveal */
  .scroll-reveal {
    opacity: 0;
    transform: translateY(50px);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }

  .scroll-reveal.revealed {
    opacity: 1;
    transform: translateY(0);
  }

  /* Variantes de animación de entrada */
  .scroll-reveal-left {
    opacity: 0;
    transform: translateX(-50px);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }

  .scroll-reveal-left.revealed {
    opacity: 1;
    transform: translateX(0);
  }

  .scroll-reveal-right {
    opacity: 0;
    transform: translateX(50px);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }

  .scroll-reveal-right.revealed {
    opacity: 1;
    transform: translateX(0);
  }

  .scroll-reveal-scale {
    opacity: 0;
    transform: scale(0.9);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }

  .scroll-reveal-scale.revealed {
    opacity: 1;
    transform: scale(1);
  }
</style>

<script>
  // Intersection Observer para animaciones de scroll
  document.addEventListener('DOMContentLoaded', () => {
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('revealed');
          // Opcionalmente, dejar de observar después de revelar
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    // Observar todos los elementos con las clases de animación
    const elementsToReveal = document.querySelectorAll(
      '.scroll-reveal, .scroll-reveal-left, .scroll-reveal-right, .scroll-reveal-scale'
    );

    elementsToReveal.forEach(element => {
      observer.observe(element);
    });
  });
</script>
